MITE Batch 2

1. Find the minimum value in array:
required data : array
required operation: min element


2. Find the least missing element in array:
eg:
9,5,23,6,24,78,12
output: 


finding first min, second min	>> O(n)>> loop



secondmin-firstmin	>> different
	6	-	5	>> 1
secondMin+1 - different
	7	- 1	>> 6>> 


3. A chocolate factory is packing chocolates into packets. The chocolate packets here represent an array arr of N number of integer values. The task is to find the empty packets(0) of chocolate and push it to the end of the conveyor belt(array).
Input:
N = 8
arr = [1, 0, 2, 3, 0, 4, 5, 0]
Output:
[1, 2, 3, 4, 5, 0, 0, 0]



Greedy
Divide and Conquer
Dynamic Programming


Day 2:
Debits:




1. Binary Search: Divide and Conquer:

2. Consider the following array is account balance of last 7 transactions, find the period of time (subSum) where the max amount kept in the account.
(max sub array where sum is max)
eg:
Input:
2, -4, 1, 9, -6, 7, -3
output:
10

Input:
-2, 1, 3, -3, 4, -1, 2, 1, -5, 4
Output:
7

3. Equilibrium Index of account balance in that day you can see the balances of past and post are equals

int[] arr = {10, 20, 30, 10, 10, 10, 30, 20, 10, 10};
System.out.println(equilibriumIndex(arr)); // Output: Can't find Equilibrium day
int[] myStatement = {-7, 1, 5, 2, -4, 3, 0};
day is : 3


4. Find the number of debits in last transactions as array of following values
input:
[1200,300,19000,400,120,500]
Output:
3

5. You are given a string s consisting of n characters which are either 'X' or 'O'.
A move is defined as selecting three consecutive characters of s and converting them to 'O'. Note that if a move is applied to the character 'O', it will stay the same.
Return the minimum number of moves required so that all the characters of s are converted to 'O'.
Example 1:
Input: s = "XXX"
Output: 1
Explanation: XXX -> OOO
We select all the 3 characters and convert them in one move.
Example 2:
Input: s = "XXOX"
Output: 2
Explanation: XXOX -> OOOX -> OOOO
We select the first 3 characters in the first move, and convert them to 'O'.
Then we select the last 3 characters and convert them so that the final string contains all 'O's.
Example 3:
Input: s = "OOOO"
Output: 0
Explanation: There are no 'X's in s to convert.


6. Consider the array contains 10 employees annual salary, now you gonna update take home after income tax(old regime) deduction on each
eg:
[12.5,9.2,4.5,19.5,2.5,56.8]
10.6, 9.10, 4.47, 15.6, 2.5, 39.76
no tax upto 4
4-8>> 5, 8-12>> 10, 12-16>> 15, 16-20>>20, 20-24>>25, 24>> 30
eg: 12.5 - (12.5*0.15) or 12.5*15/100 - 12.5



Day 3:
1. Using recursion to find the sum of the array:
input:
-7, 1, 5, 2, -4, 3, 0
output:
0
input:
2.5,9.2,4.5,19.5,2.5,56.8
output:
95

2. Perform linear search using recursion:
input:
arr = 2.5,9.2,4.5,19.5,2.5,56.8
element: 19.5
Output: 3
Element: 2.5
Output: 0
Element: 2.1
Output:-1


3. You are a software engineer assigned to develop a fitness tracking app. One of the features of the app is to track the number of unique ways users can climb a staircase with n steps. Each user can take either 1 step, 2 steps at a time. Implement a function that calculates the number of unique ways to climb a staircase with n steps.
Input:  n=1
Output: 1
Input: n=2
Output: 2
Input: n=5
Output: 8


4. Merge Sort
5. Inversion Count 
You are working for an e-commerce company that deals with a large volume of customer orders. The company wants to optimize its warehouse operations by analyzing the efficiency of order processing.
The goal is to count the number of inversion pairs in the order processing times to identify potential inefficiencies. An inversion pair in this context is defined as a situation where a later order (in terms of processing sequence) took less time to process than an earlier order. By identifying these inversions, you can pinpoint areas where the warehouse team may need to improve their workflow or processes.
Input
An array P[] of n integers representing the processing times of orders, in the order they were processed.
Output
The count of inversion pairs in the array.

Example
Input:
P[] = [30, 45, 25, 60, 20]
Output:
The inversion count is 5
Explanation: There are 5 inversion pairs in the array:
(45, 25) where 45 > 25 and 2 < 3
(45, 20) where 45 > 20 and 2 < 5
(30, 25) where 30 > 25 and 1 < 3
(30, 20) where 30 > 20 and 1 < 5
(60, 20) where 60 > 20 and 4 < 5
Input:  A[] = [1, 9, 6, 4, 5]
Output: The inversion count is 5
There are 5 inversions in the array: (9, 6), (9, 4), (9, 5), (6, 4), (6, 5)

6. Validate the signing up process in the income tax e filing portal with customer details such as fullname, email, aadhaar, pan, username, password

7. A chatbot needs to analyze user messages. It must count the number of vowels and consonants in a given message to determine if the message is easy to read (more vowels) or complex (more consonants).
Example:
Input: "Hello AI"
Output: Vowels: 4, Consonants: 3












Pattern	Description
^		Start of string
$		End of string
.		Any single character
*		Zero or more occurrences
+		One or more occurrences
\d		Any digit
\w		Any word character
\s		Any whitespace














Lab for day 3:
1. Using recursion, 
As part of a financial data analysis tool, you are tasked with finding a group of four distinct numbers within an array that add up to a target sum T. Write a function that takes an array of integers and a target sum T as input and returns all unique quadruples [a, b, c, d] such that a + b + c + d = T.
eg:
Input: 2,7,4,0,9,5,1,3    and expected: 20
Output: Quadruple Found
input: 2, 7, 4, 0, 9, 5, 1, 3 and expected : 50
Output: Quadruple not Found

2. Using recursion
You are working on a vending machine software that dispenses change. Given an unlimited supply of currencies of different denominations (e.g., 100, 200, 500 etc.), you need to write a program to determine the minimum number of currencies required to make a given amount x. The program should accept the amount x and the list of denominations as input and output the minimum number of coins needed.
Input
coins = [100, 200, 500]  , amount = 1100
Output
3
amount = 8700
Output:
18

3. A customer support system logs multiple issues reported by users. The first unique word in the log is often the most critical issue. Given a message, find the first non-repeating character, which represents the first unique issue. If all characters repeat, return -1.
Example:
Input: "customer service issue"
Output: "c" (since 'c' appears first and does not repeat)
Input: "aabbcc"
Output: -1

4. A spy receives a secret message that is written backward. He needs your help to decode it. Write a function that takes the encoded message (a reversed string) and returns the original message.
Example:
Input: "sdrawkcab"
Output: "backwards"





Day 4:
1. quick sort:

divide and conquer

	1. find pivotalPoint
	2. split array start - pP and pP+1, end

2. Quick Selection:
You are organizing an auction and need to find the top k bidders to finalize the winners. By identifying the k-th highest bid, you can determine the qualifying bids for the top positions.
Task: Given an array of integers representing the bids placed by participants, write a program to find the k-th highest bid using the Quickselect algorithm.
Input: bids = [12000, 50000, 30000, 45000, 60000], k = 2
Output: 50000

Explanation:
- The sorted list of bids is [12000, 30000, 45000, 50000, 60000].
- The 2nd highest bid is 50000.


	1. select the index: length-exprect>> 3
					5 - 4 	 	> 1 
	2. 

Using Dynamic Programming:
3. Stair case problem

4. Factorial using DP:

5. Imagine you are a software engineer working on a document editing application. The application allows users to edit and correct typos in their documents. One of the features you are developing is a tool to calculate the minimum number of operations required to transform one word into another. This feature is crucial for suggesting the most efficient edits and corrections to the users.

Task: Given two words, implement a function that calculates the minimum number of operations required to convert the first word into the second word. The allowed operations are:

Insert a character
Delete a character
Replace a character

Input:
Two strings word1 and word2 representing the original word and the target word, respectively.

Output:
An integer representing the minimum number of operations required to convert word1 into word2.

Example:
Input: word1 = "horse", word2 = "rose"
Output: 2

Explanation:
- To transform "horse" into "rose", the following 2 operations are required:
  1. Replace 'h' with 'r' -> "rorse"
  2. Delete 'r' -> "rose"



Day 5:
1. Using hash table to find array frequency
Frequency Count of Elements in an Array
You are analyzing survey results and need to count the frequency of each response.
Task:
Given an array of integers, count the frequency of each element using a HashMap.
Example:
Input:
arr = [1, 2, 1, 3, 2, 1]
Output:
1 -> 3  
2 -> 2  
3 -> 1

2. Find Two Sum Pairs
You are designing a finance app and need to identify transactions that sum up to a target amount.
Task:
Find two numbers from an array that add up to a target value using a HashMap.
Example:
Input:
arr = [2, 7, 11, 15], target = 9
Output:
[2, 7]


3. building an scrum board with buckets as key and list of tasks each bucket as value

4. Finding the maximum or minimum sum of a subarray of a fixed length.
Input:
arr = 1, 2, 3, 4, 5, 6, 7, 8, 9
k = 3
Output:
24

5. Minimum Window Substring
User Behavior Analysis on E-commerce Platform
An e-commerce platform tracks user activities like "search product," "add to cart," and "checkout." To optimize user journeys, analysts want to find the shortest sequence containing all these events.

Problem Statement:
Given a list of user activities, find the smallest window containing all key actions.

Example:
Input:
activities = ["browse", "search product", "add to cart", "checkout", "feedback"]  
required_actions = ["search product", "checkout"]
Output:
["search product", "add to cart", "checkout"]

Day 6:

1. Customer analysis of previous day

2. Sliding Window Maximum
Heart Rate Monitoring in Healthcare:
A wearable health device monitors a user's heart rate during exercise. To provide health insights, the device must track the highest heart rate over every 1-minute interval.
Problem Statement: Given an array heartRates[] and an integer k, find the maximum heart rate for each sliding window of size k.
Input1:
heartRates = [72, 80, 75, 90, 85, 92, 88]
k = 3
Output1:
Maximum heart rates for each sliding window:
[80, 90, 90, 92, 92]

heartRates = [70, 85, 60, 95, 82, 74, 90]
k = 2
Maximum heart rates for each sliding window:
[85, 85, 95, 95, 82, 90]
Window [70, 85] → max = 85
Window [85, 60] → max = 85
Window [60, 95] → max = 95
Window [95, 82] → max = 95
Window [82, 74] → max = 82
Window [74, 90] → max = 90


3. Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.
Example 1:
Input: temperatures = [73,74,75,71,69,72,76,73]
Output: [1,1,4,2,1,1,0,0]

Example 2:
Input: temperatures = [30,40,50,60]
Output: [1,1,1,0]

Example 3:
Input: temperatures = [30,60,90]
Output: [1,1,0]




Day 7: Stack, LinkedList
1. Car Fleet
There are n cars at given miles away from the starting mile 0, traveling to reach the mile target.
You are given two integer array position and speed, both of length n, where position[i] is the starting mile of the ith car and speed[i] is the speed of the ith car in miles per hour.
A car cannot pass another car, but it can catch up and then travel next to it at the speed of the slower car.
A car fleet is a car or cars driving next to each other. The speed of the car fleet is the minimum speed of any car in the fleet.
If a car catches up to a car fleet at the mile target, it will still be considered as part of the car fleet.
Return the number of car fleets that will arrive at the destination.

Example 1:
Input: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]
Output: 3
Explanation:
The cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12. The fleet forms at target.
The car starting at 0 (speed 1) does not catch up to any other car, so it is a fleet by itself.
The cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.

Example 2:
Input: target = 10, position = [3], speed = [3]
Output: 1
Explanation:
There is only one car, hence there is only one fleet.

Example 3:
Input: target = 100, position = [0,2,4], speed = [4,2,1]
Output: 1
Explanation:
The cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. The car starting at 4 (speed 1) travels to 5.
Then, the fleet at 4 (speed 2) and the car at position 5 (speed 1) become one fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.


2. Largest Rectangle in Histogram, Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.

Example 1:
Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.

Example 2:
Input: heights = [2,4]
Output: 4



3. You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.
Merge all the linked-lists into one sorted linked-list and return it.

Example 1:
Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[  1->4->5,
  1->3->4,
  2->6]
merging them into one sorted list:
1->1->2->3->4->4->5->6

Example 2:
Input: lists = []
Output: []

Example 3:
Input: lists = [[]]
Output: []

4. Reverse Nodes in k-Group, Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
You may not alter the values in the list's nodes, only nodes themselves may be changed.

Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

Example 2:
Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]



